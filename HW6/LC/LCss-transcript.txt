GHCi, version 8.2.2: http://www.haskell.org/ghc/  :? for help
Prelude> :load LCss
[1 of 5] Compiling State            ( State.hs, interpreted )
[2 of 5] Compiling LC               ( LC.hs, interpreted )
[3 of 5] Compiling LCParser         ( LCParser.hs, interpreted )
[4 of 5] Compiling LCCEK            ( LCCEK.hs, interpreted )
[5 of 5] Compiling Main             ( LCss.hs, interpreted )
Ok, five modules loaded.
*Main> stepRunC' fact state4
Step: 0
 C { x1 := 1; x2 := val(x0); while (val(x2)>0) do { x1 := (val(x1)*val(x2
 s[0]=4   s[1]=0   s[2]=0   s[3]=0   s[4]=0     <tap return>
Step: 1
 C { skip; x2 := val(x0); while (val(x2)>0) do { x1 := (val(x1)*val(x2));
 s[0]=4   s[1]=1   s[2]=0   s[3]=0   s[4]=0     <tap return>
Step: 2
 C { x2 := val(x0); while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x2 :=
 s[0]=4   s[1]=1   s[2]=0   s[3]=0   s[4]=0     <tap return>
Step: 3
 C { x2 := 4; while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x2 := (val(
 s[0]=4   s[1]=1   s[2]=0   s[3]=0   s[4]=0     <tap return>
Step: 4
 C { skip; while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x2 := (val(x2)
 s[0]=4   s[1]=1   s[2]=4   s[3]=0   s[4]=0     <tap return>
Step: 5
 C while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }
 s[0]=4   s[1]=1   s[2]=4   s[3]=0   s[4]=0     <tap return>
Step: 6
 C if (val(x2)>0) then { { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }; 
 s[0]=4   s[1]=1   s[2]=4   s[3]=0   s[4]=0     <tap return>
Step: 7
 C if (4>0) then { { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }; while 
 s[0]=4   s[1]=1   s[2]=4   s[3]=0   s[4]=0     <tap return>
Step: 8
 C if tt then { { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }; while (va
 s[0]=4   s[1]=1   s[2]=4   s[3]=0   s[4]=0     <tap return>
Step: 9
 C { { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }; while (val(x2)>0) do
 s[0]=4   s[1]=1   s[2]=4   s[3]=0   s[4]=0     <tap return>
Step: 10
 C { { x1 := (1*val(x2)); x2 := (val(x2)-1) }; while (val(x2)>0) do { x1 
 s[0]=4   s[1]=1   s[2]=4   s[3]=0   s[4]=0     <tap return>
Step: 11
 C { { x1 := (1*4); x2 := (val(x2)-1) }; while (val(x2)>0) do { x1 := (va
 s[0]=4   s[1]=1   s[2]=4   s[3]=0   s[4]=0     <tap return>
Step: 12
 C { { x1 := 4; x2 := (val(x2)-1) }; while (val(x2)>0) do { x1 := (val(x1
 s[0]=4   s[1]=1   s[2]=4   s[3]=0   s[4]=0     <tap return>
Step: 13
 C { { skip; x2 := (val(x2)-1) }; while (val(x2)>0) do { x1 := (val(x1)*v
 s[0]=4   s[1]=4   s[2]=4   s[3]=0   s[4]=0     <tap return>
Step: 14
 C { x2 := (val(x2)-1); while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x
 s[0]=4   s[1]=4   s[2]=4   s[3]=0   s[4]=0     <tap return>
Step: 15
 C { x2 := (4-1); while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x2 := (
 s[0]=4   s[1]=4   s[2]=4   s[3]=0   s[4]=0     <tap return>
Step: 16
 C { x2 := 3; while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x2 := (val(
 s[0]=4   s[1]=4   s[2]=4   s[3]=0   s[4]=0     <tap return>
Step: 17
 C { skip; while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x2 := (val(x2)
 s[0]=4   s[1]=4   s[2]=3   s[3]=0   s[4]=0     <tap return>
Step: 18
 C while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }
 s[0]=4   s[1]=4   s[2]=3   s[3]=0   s[4]=0     <tap return>
Step: 19
 C if (val(x2)>0) then { { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }; 
 s[0]=4   s[1]=4   s[2]=3   s[3]=0   s[4]=0     <tap return>
Step: 20
 C if (3>0) then { { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }; while 
 s[0]=4   s[1]=4   s[2]=3   s[3]=0   s[4]=0     <tap return>
Step: 21
 C if tt then { { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }; while (va
 s[0]=4   s[1]=4   s[2]=3   s[3]=0   s[4]=0     <tap return>
Step: 22
 C { { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }; while (val(x2)>0) do
 s[0]=4   s[1]=4   s[2]=3   s[3]=0   s[4]=0     <tap return>
Step: 23
 C { { x1 := (4*val(x2)); x2 := (val(x2)-1) }; while (val(x2)>0) do { x1 
 s[0]=4   s[1]=4   s[2]=3   s[3]=0   s[4]=0     <tap return>
Step: 24
 C { { x1 := (4*3); x2 := (val(x2)-1) }; while (val(x2)>0) do { x1 := (va
 s[0]=4   s[1]=4   s[2]=3   s[3]=0   s[4]=0     <tap return>
Step: 25
 C { { x1 := 12; x2 := (val(x2)-1) }; while (val(x2)>0) do { x1 := (val(x
 s[0]=4   s[1]=4   s[2]=3   s[3]=0   s[4]=0     <tap return>
Step: 26
 C { { skip; x2 := (val(x2)-1) }; while (val(x2)>0) do { x1 := (val(x1)*v
 s[0]=4   s[1]=12   s[2]=3   s[3]=0   s[4]=0     <tap return>
Step: 27
 C { x2 := (val(x2)-1); while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x
 s[0]=4   s[1]=12   s[2]=3   s[3]=0   s[4]=0     <tap return>
Step: 28
 C { x2 := (3-1); while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x2 := (
 s[0]=4   s[1]=12   s[2]=3   s[3]=0   s[4]=0     <tap return>
Step: 29
 C { x2 := 2; while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x2 := (val(
 s[0]=4   s[1]=12   s[2]=3   s[3]=0   s[4]=0     <tap return>
Step: 30
 C { skip; while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x2 := (val(x2)
 s[0]=4   s[1]=12   s[2]=2   s[3]=0   s[4]=0     <tap return>
Step: 31
 C while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }
 s[0]=4   s[1]=12   s[2]=2   s[3]=0   s[4]=0     <tap return>
Step: 32
 C if (val(x2)>0) then { { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }; 
 s[0]=4   s[1]=12   s[2]=2   s[3]=0   s[4]=0     <tap return>
Step: 33
 C if (2>0) then { { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }; while 
 s[0]=4   s[1]=12   s[2]=2   s[3]=0   s[4]=0     <tap return>
Step: 34
 C if tt then { { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }; while (va
 s[0]=4   s[1]=12   s[2]=2   s[3]=0   s[4]=0     <tap return>
Step: 35
 C { { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }; while (val(x2)>0) do
 s[0]=4   s[1]=12   s[2]=2   s[3]=0   s[4]=0     <tap return>
Step: 36
 C { { x1 := (12*val(x2)); x2 := (val(x2)-1) }; while (val(x2)>0) do { x1
 s[0]=4   s[1]=12   s[2]=2   s[3]=0   s[4]=0     <tap return>
Step: 37
 C { { x1 := (12*2); x2 := (val(x2)-1) }; while (val(x2)>0) do { x1 := (v
 s[0]=4   s[1]=12   s[2]=2   s[3]=0   s[4]=0     <tap return>
Step: 38
 C { { x1 := 24; x2 := (val(x2)-1) }; while (val(x2)>0) do { x1 := (val(x
 s[0]=4   s[1]=12   s[2]=2   s[3]=0   s[4]=0     <tap return>
Step: 39
 C { { skip; x2 := (val(x2)-1) }; while (val(x2)>0) do { x1 := (val(x1)*v
 s[0]=4   s[1]=24   s[2]=2   s[3]=0   s[4]=0     <tap return>
Step: 40
 C { x2 := (val(x2)-1); while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x
 s[0]=4   s[1]=24   s[2]=2   s[3]=0   s[4]=0     <tap return>
Step: 41
 C { x2 := (2-1); while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x2 := (
 s[0]=4   s[1]=24   s[2]=2   s[3]=0   s[4]=0     <tap return>
Step: 42
 C { x2 := 1; while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x2 := (val(
 s[0]=4   s[1]=24   s[2]=2   s[3]=0   s[4]=0     <tap return>
Step: 43
 C { skip; while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x2 := (val(x2)
 s[0]=4   s[1]=24   s[2]=1   s[3]=0   s[4]=0     <tap return>
Step: 44
 C while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }
 s[0]=4   s[1]=24   s[2]=1   s[3]=0   s[4]=0     <tap return>
Step: 45
 C if (val(x2)>0) then { { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }; 
 s[0]=4   s[1]=24   s[2]=1   s[3]=0   s[4]=0     <tap return>
Step: 46
 C if (1>0) then { { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }; while 
 s[0]=4   s[1]=24   s[2]=1   s[3]=0   s[4]=0     <tap return>
Step: 47
 C if tt then { { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }; while (va
 s[0]=4   s[1]=24   s[2]=1   s[3]=0   s[4]=0     <tap return>
Step: 48
 C { { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }; while (val(x2)>0) do
 s[0]=4   s[1]=24   s[2]=1   s[3]=0   s[4]=0     <tap return>
Step: 49
 C { { x1 := (24*val(x2)); x2 := (val(x2)-1) }; while (val(x2)>0) do { x1
 s[0]=4   s[1]=24   s[2]=1   s[3]=0   s[4]=0     <tap return>
Step: 50
 C { { x1 := (24*1); x2 := (val(x2)-1) }; while (val(x2)>0) do { x1 := (v
 s[0]=4   s[1]=24   s[2]=1   s[3]=0   s[4]=0     <tap return>
Step: 51
 C { { x1 := 24; x2 := (val(x2)-1) }; while (val(x2)>0) do { x1 := (val(x
 s[0]=4   s[1]=24   s[2]=1   s[3]=0   s[4]=0     <tap return>
Step: 52
 C { { skip; x2 := (val(x2)-1) }; while (val(x2)>0) do { x1 := (val(x1)*v
 s[0]=4   s[1]=24   s[2]=1   s[3]=0   s[4]=0     <tap return>
Step: 53
 C { x2 := (val(x2)-1); while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x
 s[0]=4   s[1]=24   s[2]=1   s[3]=0   s[4]=0     <tap return>
Step: 54
 C { x2 := (1-1); while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x2 := (
 s[0]=4   s[1]=24   s[2]=1   s[3]=0   s[4]=0     <tap return>
Step: 55
 C { x2 := 0; while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x2 := (val(
 s[0]=4   s[1]=24   s[2]=1   s[3]=0   s[4]=0     <tap return>
Step: 56
 C { skip; while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x2 := (val(x2)
 s[0]=4   s[1]=24   s[2]=0   s[3]=0   s[4]=0     <tap return>
Step: 57
 C while (val(x2)>0) do { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }
 s[0]=4   s[1]=24   s[2]=0   s[3]=0   s[4]=0     <tap return>
Step: 58
 C if (val(x2)>0) then { { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }; 
 s[0]=4   s[1]=24   s[2]=0   s[3]=0   s[4]=0     <tap return>
Step: 59
 C if (0>0) then { { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }; while 
 s[0]=4   s[1]=24   s[2]=0   s[3]=0   s[4]=0     <tap return>
Step: 60
 C if ff then { { x1 := (val(x1)*val(x2)); x2 := (val(x2)-1) }; while (va
 s[0]=4   s[1]=24   s[2]=0   s[3]=0   s[4]=0     <tap return>
Step: 61
 C skip
 s[0]=4   s[1]=24   s[2]=0   s[3]=0   s[4]=0     <tap return>
*Main> quickCheck ss_prop
+++ OK, passed 100 tests.
*Main> run' cmd3 state0
Step: -1
 C skip
 s[0]=-2   s[1]=0   s[2]=3   s[3]=-3   
*Main> stepRunC' cmd3 state0
Step: 0
 C { x0 := (-2); x3 := ((-3)+val(x1)) }
 s[0]=1   s[1]=0   s[2]=3     <tap return>
Step: 1
 C { skip; x3 := ((-3)+val(x1)) }
 s[0]=-2   s[1]=0   s[2]=3     <tap return>
Step: 2
 C x3 := ((-3)+val(x1))
 s[0]=-2   s[1]=0   s[2]=3     <tap return>
Step: 3
 C x3 := ((-3)+0)
 s[0]=-2   s[1]=0   s[2]=3     <tap return>
Step: 4
 C x3 := (-3)
 s[0]=-2   s[1]=0   s[2]=3     <tap return>
Step: 5
 C skip
 s[0]=-2   s[1]=0   s[2]=3   s[3]=-3     <tap return>
*Main> stepRunC' cmd0 state0
Step: 0
 C skip
 s[0]=1   s[1]=0   s[2]=3     <tap return>
*Main> stepRunB' be3 state0
Step: 0
 B ((val(x0)-3)==(7-val(x1)))
 s[0]=1   s[1]=0   s[2]=3     <tap return>
Step: 1
 B ((1-3)==(7-val(x1)))
 s[0]=1   s[1]=0   s[2]=3     <tap return>
Step: 2
 B ((-2)==(7-val(x1)))
 s[0]=1   s[1]=0   s[2]=3     <tap return>
Step: 3
 B ((-2)==(7-0))
 s[0]=1   s[1]=0   s[2]=3     <tap return>
Step: 4
 B ((-2)==7)
 s[0]=1   s[1]=0   s[2]=3     <tap return>
Step: 5
 B ff
 s[0]=1   s[1]=0   s[2]=3     <tap return>
*Main> stepRunA' ae3 state0
Step: 0
 A ((val(x0)-3)*(7-val(x1)))
 s[0]=1   s[1]=0   s[2]=3     <tap return>
Step: 1
 A ((1-3)*(7-val(x1)))
 s[0]=1   s[1]=0   s[2]=3     <tap return>
Step: 2
 A ((-2)*(7-val(x1)))
 s[0]=1   s[1]=0   s[2]=3     <tap return>
Step: 3
 A ((-2)*(7-0))
 s[0]=1   s[1]=0   s[2]=3     <tap return>
Step: 4
 A ((-2)*7)
 s[0]=1   s[1]=0   s[2]=3     <tap return>
Step: 5
 A (-14)
 s[0]=1   s[1]=0   s[2]=3     <tap return>
*Main> run' cmd0 state0
Step: -1
 C skip
 s[0]=1   s[1]=0   s[2]=3   
*Main> 